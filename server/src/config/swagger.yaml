openapi: 3.0.0
info:
  title: Product Management API
  version: 1.0.0
  description: API for managing products
servers:
  - url: "{{API_BASE_URL}}"
    description: Local development server
paths:
  /auth/register:
    post:
      summary: Create a new user
      description: Registers a new user in the system.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
                - role
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
                name:
                  type: string
                  example: John Doe
                role:
                  type: string
                  enum:
                    - seller
                    - admin
                    - client
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "400":
          description: Invalid request
          content:
            application/json:
              examples:
                invalidData:
                  summary: Prisma validation error
                  value:
                    message: "Validation failed"
                    errors:
                      - field: "name"
                        message: "Name must have at least 3 characters"
                      - field: "email"
                        message: "Invalid email format"
                      - field: "password"
                        message: "Password must have at least 8 characters"
                  userExists:
                    summary: User already exists
                    value:
                      message: "User already exists"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/login:
    post:
      summary: Authenticate a user
      description: Logs in a user and returns a JWT token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI...
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auth/forgot-password:
    post:
        summary: Request password reset
        description: Sends an email with instructions to reset the password.
        tags:
          - Authentication
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - email
                properties:
                  email:
                    type: string
                    format: email
                    example: user@example.com
        responses:
          "200":
            description: Email sent with instructions to reset password
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Email sent with instructions to reset password
          "404":
            description: User not found
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
          "500":
            description: Internal server error
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/ErrorResponse"
  /auth/reset-password:
    post:
      summary: Reset user password
      description: Resets the user password using the token sent via email.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - token
                - newPassword
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                token:
                  type: string
                  example: a1b2c3d4...
                newPassword:
                  type: string
                  example: newSecurePassword123
      responses:
        "200":
          description: Password successfully reset
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password successfully reset
        "400":
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products:
    post:
      summary: Create a new product
      description: Adds a new product to the system.
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Product successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Only sellers can create products"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: Get all products
      description: Retrieves a list of all registered products.
      tags:
        - Products
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Successfully retrieved product list
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/Product"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /products/import:
    post:
      summary: Import multiple products
      description: Bulk import products by sending an array of product objects.
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Products imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  importedCount:
                    type: integer
                    example: 20
                  message:
                    type: string
                    example: Products imported successfully
        "400":
          description: Invalid file or format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized - Only sellers can import products"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{id}:
    get:
      summary: Get a product by id
      description: Retrieves a single product.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid request
          content:
            application/json:
              examples:
                invalidData:
                  summary: Invalid product ID
                  value:
                    message: "Invalid product ID"
        "404":
          description: Not Found
          content:
            application/json:
              examples:
                notFound:
                  summary: Product not found
                  value:
                    message: "Product not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Updates a product with form data
      description: ""
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - stock
              properties:
                name:
                  type: string
                  example: Logitech Wireless Mouse
                price:
                  type: number
                  example: 49.99
                stock:
                  type: number
                  example: 10
      responses:
        "200":
          description: Successfully updated product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Unauthorized
          content:
            application/json:
              examples:
                unauthorized:
                  summary: User is not allowed to create a product
                  value:
                    message: "Unauthorized - Only sellers can create products"
        "404":
          description: Not Found
          content:
            application/json:
              examples:
                notFound:
                  summary: Product not found with the provided id
                  value:
                    message: Product not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Deletes a product
      description: delete a product
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of product
          required: true
      responses:
        "200":
          description: Successfully deleted product
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
        "403":
          description: Unauthorized
          content:
            application/json:
               examples:
                unauthorized:
                  summary: User is not allowed to create a product
                  value:
                    message: "Unauthorized - Only sellers can create products"
        "404":
          description: Not Found
          content:
            application/json:
              examples:
                notFound:
                  summary: Product not found with the provided id
                  value:
                    message: Product not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          minLength: 3
          example: "John Doe"
          description: "Name must have at least 3 characters"
        email:
          type: string
          format: email
          example: "user@example.com"
          description: "Must be a valid email format"
        password:
          type: string
          minLength: 8
          example: "securepassword123"
          description: "Password must be at least 8 characters long"
        role:
          type: string
          enum:
            - seller
            - admin
            - client
          example: "admin"
          description: "Role must be 'seller', 'admin', or 'client'"
        resetPasswordToken:
          type: string
          nullable: true
          example: "4f92c4cf2931d7cbd82f6225b3db5c77"
          description: Token used to reset the user's password (expires in 1h)
        resetPasswordExpires:
          type: string
          format: date-time
          nullable: true
          example: "2025-04-04T13:00:00.000Z"
          description: Expiration date and time for the reset password token
        createdAt:
          type: string
          format: date-time
          example: "2021-09-01T00:00:00.000Z"
          description: "Timestamp of when the user was created (auto-generated)"
        updatedAt:
          type: string
          format: date-time
          example: "2023-09-02T14:30:00.000Z"
          description: "Timestamp of last update (auto-generated)"
    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Invalid email format"
    Product:
      type: object
      required:
        - product_name
        - price
        - quantity
        - merchant_id
        - userId
      properties:
        id:
          type: string
          format: uuid
          example: "2d8f9077-e86e-4a44-a310-726b33c0d2a9"
        product_name:
          type: string
          example: "Logitech Wireless Mouse"
        description:
          type: string
          example: "A high-precision wireless mouse"
        price:
          type: number
          example: 49.99
        quantity:
          type: integer
          example: 10
        MSC:
          type: boolean
          example: true
        product_type:
          type: array
          items:
            type: string
          example: ["Apparels"]
        product_group:
          type: array
          items:
            type: string
          example: ["Hats & Caps"]
        department:
          type: array
          items:
            type: string
          example: ["Men"]
        size:
          type: string
          example: "ONESIZE"
        image_url:
          type: string
          format: uri
          example: "https://images.footway.com/02/60969-85_002.png"
        supplier_model_number:
          type: string
          example: "60298444"
        ean:
          type: array
          items:
            type: string
          example: ["196818661462"]
        variant_id:
          type: string
          example: "2025646"
        merchant_id:
          type: string
          example: "SOL"
        createdAt:
          type: string
          format: date-time
          example: "2021-09-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-09-02T14:30:00.000Z"
        userId:
          type: string
          format: uuid
          example: "be4d9b15-4b68-4efe-adbf-aa14642ebe49"
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Internal server error"

security:
  - BearerAuth: []
